buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

def mod_file = getModFile()
version = getVersion("VERSION", mod_file)
def llibrary_version = getVersion("LLIBRARY_VERSION", mod_file)
group = "fossilsarcheology"
archivesBaseName = "fossilsarcheology"
sourceCompatibility = targetCompatibility = "1.8"

minecraft {
    version = "1.12.2-14.23.3.2655"
    runDir = "minecraft"
    mappings = "snapshot_20180331"
}

repositories {
    mavenCentral()
    maven {
        name = "ilexiconn"
        url = "http://maven.mcmoddev.com"
    }
    maven {
        name = "Mobius Repo"
        url = "http://tehnut.info/maven"
    }
    maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    compile "net.ilexiconn:llibrary:1.7.9-1.12.2:dev"
    deobfCompile "mcp.mobius.waila:Hwyla:1.8.25-B40_1.12"
    runtime "mezz.jei:jei_1.12.2:4.9.1.175"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "llibrary_version", llibrary_version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version, "llibrary_version": llibrary_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    manifest {
        attributes "FMLAT": "fossil_at.cfg"
    }
}

task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
    manifest {
        attributes "FMLAT": "fossil_at.cfg"
    }
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }

    return "$major.$revision.$patch";
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

